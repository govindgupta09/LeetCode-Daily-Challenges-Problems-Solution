1293. Shortest Path in a Grid with Obstacles Elimination
Hard

You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.

Return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.

 

Example 1:


Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1
Output: 6
Explanation: 
The shortest path without eliminating any obstacle is 10.
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).
Example 2:


Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1
Output: -1
Explanation: We need to eliminate at least two obstacles to find such a walk.
 
 
 ##################################################################################################
 
 class Solution {
    private static int[] di = new int[] {0,  0, 1, -1};
    private static int[] dj = new int[] {1, -1, 0,  0};
    
    record Cell (int i, int j, int steps, int k) {}

    public int shortestPath(int[][] grid, int k) {
        int m = grid.length, n = grid[0].length, max = m + n - 2;
        if (k > max - 2) return max;
        int[][] visited = new int[m][n];
        for (var a : visited) Arrays.fill(a, -1);
        
        Queue<Cell> q = new ArrayDeque<>();
        Cell c0 = new Cell(0, 0, 0, k);
        visited[0][0] = k;
        q.offer(c0);
        
        while (!q.isEmpty()) {
            Cell cur = q.poll();
            if (cur.i == m-1 && cur.j == n-1) return cur.steps;
            for (int i = 0; i < 4; i++) {
                int i2 = cur.i + di[i], j2 = cur.j + dj[i];
                if (i2 < 0 || j2 < 0 || i2 >= m || j2 >= n) continue;
                int k2 = cur.k - grid[i2][j2];
                if (k2 <= visited[i2][j2]) continue;
                visited[i2][j2] = k2;
                q.offer(new Cell(i2, j2, cur.steps+1, k2));
            }
        }
        
        return -1;
    }
}

334. Increasing Triplet Subsequence (Medium)

Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.
Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.
Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.

############################################################################################################################

// class Solution {
//     public boolean increasingTriplet(int[] nums) {
//         int n = 0 ;
//         while(n < nums.length-3){
//             for(int i=0,j=i+1,k=j+1;i<nums.length-3;i++){
//                 if(nums[i]>nums[j] && nums[j]>nums[k] || nums[i]>nums[j] || nums[j]>nums[k]){
//                     return false;
//                 }
//                 if(nums[i]<nums[j ] && nums[j]<nums[k]){
//                     return true;
//                 }
//             }
//         }n++;
//         return false;
//     }
// }


public class Solution {
   public boolean increasingTriplet(int[] nums) {
        int x = Integer.MAX_VALUE;
        int y = Integer.MAX_VALUE;

        for(int i = 0; i < nums.length; i ++) {
            int z = nums[i];

            if (x >= z) {
                x = z;
            } else if (y>=z) {
                y = z;
            } else {
                return true;
            }
        }

        return false;
    }
}
